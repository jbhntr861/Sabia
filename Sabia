import os
import sys
import pyttsx3
import speech_recognition as sr
import sqlite3
import openai
import yaml
import pyaudio

def make_request (config): 
  api_key = config['davinci_model_003']['api_key']
  
  # import openai
  openai = __import__('openai')
  # create an openai api client
  api = openai.API(api_key)
  # make a request to davinci model using the api
  response = api.engine.get_response(user_input, engine="davinci", retrieve_previous_responses=True)
  
  return response

#Check if config.yml exists
if os.path.exists('config.yml'):
    with open('config.yml', 'r') as f:
        config = yaml.safe_load(f)

apiKey = config['apiKey']
openai.api_key = apiKey

#Check if API key exists

if apiKey == 'YOURAPIKEYGOESHERE':
    print("""\tMissing API key!\n\tThou hath been slain by A Diseased Inn Damsel! Thou art dead[LOADING...].\r
             Uh oh, T'would seem that someone nae hath read the instructions!\r
             Pray read ye the README for information on retrieving thy API key.""")
    sys.exit(1)


def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Declare thine words! Mote thy request! for Sabia hearkens...")
        audio = r.listen(source)
    data = ""
    try:
        data = r.recognize_google(audio)
        print("I herde thee saye.." + data)
    except sr.UnknownValueError:
        print("S'rry, I understandeth not whereto thou sayeth")
    except sr.RequestError as e:
        print("Request Failed; {0}".format(e))
    return data

def respond(audioString):
    print(audioString)
    tts = gTTS(text=audioString, lang='en')
    tts.save("speech.mp3")
    sp.run("mpg321 speech.mp3")

# Save user input as speech from the microphone to a text file.
def voice_run():
    print("\nWould thoust like to converse with Sabia in voice on Windows or Linux?\n")
    resp = input("\nType 'Windows' to converse with Sabia in voice on Windows or 'Linux' to converse with Sabia in voice on Linux: ")
    if resp == "Windows":
        voice_windows_run()
    elif resp == "Linux":
        voice_linux_run()
    else:
        print("\nThoust shalt not enter that which is not offered. Please select the option of Windows or Linux.\n")
        voice_run()

def text_run():
    user_input = ""
    first_time=True
    while user_input!='bye':
        if first_time==True:
            user_input = input("""\nSabia: I am Sabia, the all-wise Terminal Oracle.
                            \rThou mayst sayest 'bye' to depart at any time to continue upon thine journeys.\r
                            I may tell stories, give instructions, write computer programs, or just converse.
                            \nAsk and thou shall receive: """)
            first_time=False
        else:
            user_input=input("You: ")

        #Check if user input is blank
        if not user_input:
            print("""\nSabia: A foolyshe demand behoueth a foolyshe answere!
                    \rI do not understand thy question. Asketh thou once more: """)
        else:
            response = openai.Completion.create(
            model="text-davinci-003",
            prompt=user_input,
            temperature=0.9,
            max_tokens=2256,
            top_p=1
            )
            print(f"Sabia: {response['choices'][0]['text']}")

        if user_input=='bye':
            print("Sabia: Fare thee well, and beware ye the Damsels parousing about the inn!")
            sys.exit(0)


# define the voice functions - one for Windows and one for Linux
def voice_windows_run():
    while True:
        data = listen()
        time.sleep(0.5)
        if "exit" in data:
            break
        response = openai.Completion.create(
            max_tokens=2256,
            model="text-davinci-003",
            prompt=data,
            temperature=0.9,
            top_p=1
        )
        reply = "Sabia: {response['choices'][0]['text']}"
        respond(reply)

def voice_linux_run():
    while True:
        data = listen()
        time.sleep(0.5)
        if "exit" in data:
            break
        response = openai.Completion.create(
            max_tokens=2256,
            model="text-davinci-003",
            prompt=data,
            temperature=0.9,
            top_p=1
        )
        reply = "Sabia: {response['choices'][0]['text']}"
        with open('conversation.txt', 'w') as f:
            f.write(reply)
        sp.run("espeak conversation.txt")

# define the text function
def text_run():
    user_input = ""
    first_time=True
    while user_input!='bye':
        if first_time==True:
            user_input = input("""\nSabia: I am Sabia, the all-wise Terminal Oracle.
                            \rThou mayst sayest 'bye' to depart at any time to continue upon thine journeys.\r
                            I may tell stories, give instructions, write computer programs, or just converse.
                            \nAsk and thou shall receive: """)
            
         

        else: user_input=input("You: ")
        first_time=False

#Check if user input is blank

        if not user_input:
            print("""\nSabia: A foolyshe demand behoueth a foolyshe answere!
                    \rI do not understand thy question. Asketh thou once more: """)
        else:
            response = openai.Completion.create(
            model="text-davinci-003",
            prompt=user_input,
            temperature=0.9,
            max_tokens=2256,
            top_p=1
            )
            print(f"Sabia: {response['choices'][0]['text']}")

        if user_input=='bye':
            print("Sabia: Fare thee well, and beware ye the Damsels parousing about the inn!")
            sys.exit(0)

# create a function to start the voice functions
def voice_start():
    print("\nWould thoust like to converse with Sabia in voice or text?\n")
    resp = input("\nType 'voice' to converse with Sabia in voice or 'text' to converse with Sabia in text: ")
    if resp == "voice":
        voice_run()
    elif resp == "text":
        text_run()
    else:
        print("\nThoust shalt not enter that which is not offered. Please select the option of voice or text.\n")
        voice_start()

# call the voice_start function to begin the program
voice_start()
