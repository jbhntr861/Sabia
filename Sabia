import numpy as np
from scipy import signal
import openai
import yaml
import speech_recognition as sr
from gtts import gTTS
from subprocess import run
import sys
import time
import os
import logging

class AudioProcessor:
    def preprocess_audio(self, audio):
        audio_data = np.frombuffer(audio, np.int16)
        # normalize the audio data
        normalized_data = np.array(audio_data) / np.max(np.abs(audio_data))
        # get the mel-frequency cepstral coefficients
        mfcc = self.get_mfcc(normalized_data)
        return mfcc

class Sabia:
    def __init__(self):
        self.audio_processor = AudioProcessor()
        self.logger = logging.getLogger('Sabia')
        self.logger.setLevel(logging.DEBUG)
        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        self.logger.addHandler(ch)
    
    def voice_linux_run(self):
        audio = self.listen()
        if audio:
            preprocessed_audio = self.audio_processor.preprocess_audio(audio)
            response = make_request(preprocessed_audio, config)
            if response:
                audioString = response.choices[0].text
                self.respond(audioString)
    def start(self):
        config_file = 'config.yml'
        if not os.path.isfile(config_file):
            self.logger.error("Config file not found!")
            sys.exit(1)
        with open(config_file, 'r') as f:
            config = yaml.safe_load(f)
        apiKey = config.get('apiKey', None)
        if apiKey is None:
            self.logger.error("""\tMissing API key!\n\tThou hath been slain by A Diseased Inn Damsel! Thou art dead[LOADING...].\r""")
            self.logger.error(""" Uh oh, T'would seem that someone nae hath read the instructions!\r
                     Pray read ye the README for information on retrieving thy API key.""")
            sys.exit(1)
        openai.api_key = apiKey

    def listen(self):
        r = sr.Recognizer()
        with sr.Microphone() as source:
            self.logger.info("Declare thine words! Mote thy request! for Sabia hearkens...")
            audio = r.listen(source)
        data = ""
        try:
            data = r.recognize_google(audio)
            self.logger.info("I herde thee saye.." + data)
        except sr.UnknownValueError:
            self.logger.error("S'rry, I understandeth not whereto thou sayeth")
        except sr.RequestError as e:
            self.logger.error("Request Failed; {0}".format(e))
        return data

    def respond(self, audioString):
        self.logger.info(audioString)
        tts = gTTS(text=audioString, lang='en')
        tts.save("speech.mp3")
        try:
            run(["mpg321", "speech.mp3"])
        except FileNotFoundError:
            self.logger.error("mpg321 not found! Please install mpg321 to play audio files.")
        except Exception as e:
            self.logger.error("Error playing audio file:", e)


    def voice_start(self):
        while True:
            resp = input("\nWould thou converse with Sabia in voice or text? Type 'voice' or 'text': ")
            if resp == "voice":
                os_name = os.name
                if os_name == 'nt':
                    self.voice_windows_run()
                elif os_name == 'posix':
                    self.voice_linux_run()
                else:
                    print(f"Sorry, {os_name} is not supported for voice.")
            elif resp == "text":
                self.text_run()
            elif resp == "bye":
                print("Farewell! May thy journey be pleasant.")
                break
            else:
                  print("\nThoust shalt not enter that which is not offered. Please select the option of voice or text.\n")

        # removed recursive call to self.voice_start()

# make_request function
def make_request(preprocessed_audio, config):
    apiKey = config['apiKey']
    try:
        # make a request to OpenAI's API
        response = openai.Completion.create(
            api_key=apiKey,
            engine="davinci-v2",
            prompt=preprocessed_audio,
            temperature=0.9,
            max_tokens=2256,
            top_p=1,
        )
        return response
    except Exception as e:
        print("Error making API request:", e)
        return None

    def voice_start(self):
        while True:
            resp = input("\nWould thou converse with Sabia in voice or text? Type 'voice' or 'text': ")
            if resp == "voice":
                os_name = os.name
                if os_name == 'nt':
                    self.voice_windows_run()
                elif os_name == 'posix':
                    self.voice_linux_run()
                else:
                    print(f"Sorry, {os_name} is not supported for voice.")
            elif resp == "text":
                self.text_run()
            elif resp == "bye":
                print("Farewell! May thy journey be pleasant.")
                break
            else:
                  print("\nThoust shalt not enter that which is not offered. Please select the option of voice or text.\n")
# call the voice_start function to begin the program

if __name__ == "__main__":
    sabia = Sabia()
    sabia.start()
    sabia.voice_start()
