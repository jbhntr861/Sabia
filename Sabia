
#!/usr/bin/env python3
#########################
######Python3 Sabia######
#########################

#import necessary libraries


import openai
import os
import yaml
import sys
import speech_recognition as sr
from time import ctime
import time
import os
from gtts import gTTS
import requests, json
import subprocess as sp


#Check if config.yml exists


if os.path.exists('config.yml'):
    with open('config.yml', 'r') as f:
        config = yaml.safe_load(f)

# if it does retreive the API key


apiKey = config['apiKey']
openai.api_key = apiKey
user_input=""

# try to get from environment


if apiKey=='YOURAPIKEYGOESHERE':
        apiKey=os.getenv('OPENAI_API_KEY')

#Check if API key exists


if apiKey == 'YOURAPIKEYGOESHERE':
    print("""\tMissing API key!\nThou hast been slain by a Diseased Inn Damsel! Thou art dead.
                \nUh oh, 'twould seem someone hath not read the instructions. 
                Pray look at the README for information on retrieving thine API key.\n""")
    sys.exit(1)


#Ask the user if they would like speech or text version of the bot
choice=input(" Make a choice, wouldst thou like to type thine queuries to Sabia or wouldst thou like to have an Alexa-like experience?\nType speech for the speech version of Sabia, text for text version: ")
if choice=="text":
#execute the code below.
#Start loop
        while user_input!='bye':

                user_input = input("""\nSabia: I am Sabia, the all-wise Terminal Oracle.
                                      \rThou mayst sayest 'bye' to depart at any time to continue upon thine journeys.\r
                                        I may tell stories, give instructions, write computer programs, or just converse.
                                      \nAsk and thou shall receive: """)

    #Check if user input is blank
                if not user_input:
                        print("""\nSabia: A foolyshe demand behoueth a foolyshe answere!
                        \r I do not understand thy question. Asketh thou once more: """)
                else:
                        response = openai.Completion.create(
                        model="text-davinci-003",
                        prompt=user_input,
                        temperature=0.9,
                        top_p=1
                        )
                        print(f"Sabia: {response['choices'][0]['text']}")

                if user_input=='bye':
                        print("Sabia: Fare thee well, and beware ye the Damsels parousing about the inn!")
                        sys.exit(0)
if choice=="speech":
        #execute speech version


# Define the listening and reponse functions for the bot


        def listen():
                r = sr.Recognizer()
                with sr.Microphone() as source:
                        print("Declare thine words! Mote thy request! for Sabia hearkens...")
                        audio = r.listen(source)
                data = ""
                try:
                        data = r.recognize_google(audio)
                        print("I herde thee saye.." + data)
                except sr.UnknownValueError:
                        print("S'rry, I understandeth not whereto thou sayeth")
                except sr.RequestError as e:
                        print("Request Failed; {0}".format(e))
                return data

        def respond(audioString):
                print(audioString)
                tts = gTTS(text=audioString, lang='en')
                tts.save("speech.mp3")
                sp.run("mpg321 speech.mp3")
# Save user input as speech from the microphone to a text file.
        data=listen()
        with open('conversation.txt', 'w') as f:
                f.write(data)
# Read the text file to the API and save response to a text file
        with open('conversation.txt', 'r') as f:
                query=f.readline()

        response = openai.Completion.create(
                model="text-davinci-003",
                prompt=query,
                temperature=0.9,
                top_p=1
                )
#write this response to a file and read it outloud

        reply="Sabia: {response['choices'][0]['text']}"
        with open('conversation.txt', 'a') as f:
                f.write(reply)
        respond(reply)
