import os
import subprocess as sp
import speech_recognition as sr
from gtts import gTTS
import openai
import time

class Sabia:
    def __init__(self):
        self.openai = openai
        self.api_key = os.environ.get('API_KEY')
        self.api = self.openai.API(self.api_key)
        self.r = sr.Recognizer()

    def check_api_key(self):
        if self.api_key == 'YOURAPIKEYGOESHERE':
            message = '\tMissing API key!\n\tThou hast been slain by a Diseased Inn Damsel! Thou art dead[LOADING...].\rUh oh, t\'would seem that someone nae hath read the instructions!\rPray read ye the README for information on retrieving thy API key.'
            print(message)
            sys.exit(1)

    def make_request(self, user_input):
        response = self.api.Completion.create(
            model="text-davinci-003",
            prompt=user_input,
            temperature=0.9,
            max_tokens=2256,
            top_p=1
        )
        return response

    def listen(self):
        with sr.Microphone() as source:
            print('Declare thine words! Mote thy request! for Sabia hearkens...')
            audio = self.r.listen(source)
        data = ''
        try:
            data = self.r.recognize_google(audio)
            print('I herde thee saye..' + data)
        except sr.UnknownValueError:
            print('S\'rry, I understandeth not whereto thou sayeth')
        except sr.RequestError as e:
            print('Request Failed; {0}'.format(e))
        return data

    def respond(self, audioString):
        print(audioString)
        tts = gTTS(text=audioString, lang='en', special_symbols=True)
        tts.save('speech.mp3')
        if sys.platform == 'win32':
            sp.run('mpg321 speech.mp3')
        elif sys.platform == 'linux':
            with open('conversation.txt', 'w', encoding='utf-8') as f:
                f.write(reply)
            sp.run('espeak conversation.txt')

    def voice_run(self):
        while True:
            data = self.listen()
            time.sleep(0.5)
            if 'exit' in data:
                break
            response = self.make_request(data)
            reply = f'Sabia: {response["choices"][0]["text"]}'
            self.respond(reply)

    def run(self):
        self.check_api_key()
        self.voice_run()

if __name__ == '__main__':
    sabia = Sabia()
    sabia.run()
